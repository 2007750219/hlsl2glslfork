#extension GL_OES_standard_derivatives : require
#extension GL_EXT_shader_texture_lod : require
#extension GL_ARB_shader_texture_lod : require
float xll_dFdx(float f) {
  return dFdx(f);
}
vec2 xll_dFdx(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy(float f) {
  return dFdy(f);
}
vec2 xll_dFdy(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLodEXT( s, coord.xy, coord.w);
}
vec4 xll_texCUBElod(samplerCube s, vec4 coord) {
  return textureCubeLod( s, coord.xyz, coord.w);
}
mat2 xll_transpose(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 104 // gl_
struct MySurfaceOutput {
    highp vec3 Albedo;
    highp vec3 Normal;
    highp vec3 Emission;
    highp vec3 Specular;
    highp float Reflectivity;
    highp float Roughness;
    highp float Alpha;
};
#line 253 // gl_
struct ContinuousSamplerLOD {
    highp float mip0;
    highp float mip1;
    highp float mipFrac;
};
#line 268 // gl_
struct PlanarMapping {
    highp vec4 plane;
    highp vec3 tangent;
    highp vec3 bitangent;
    highp vec2 uvOffset;
};
#line 91 // gl_
struct Input {
    highp vec2 uv_MainTex;
    highp vec2 uv_BumpMap;
    highp vec3 viewDir;
    highp vec3 worldPos;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 407 // gl_
struct v2f_surf {
    highp vec4 pos;
    highp vec4 pack0;
    highp vec3 worldPos;
    highp vec3 viewDir;
    lowp vec4 TtoW0;
    lowp vec4 TtoW1;
    lowp vec4 TtoW2;
    highp vec4 lmap;
    lowp vec3 lightDir;
};
#line 17 // gl_
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
uniform sampler2D _BumpMap;
uniform sampler2D _BumpMap2;
uniform highp vec4 _BumpMap2_ST;
uniform highp float _BumpMapFactor;
uniform highp float _BumpMapFactor2;
uniform lowp vec4 _Color;
uniform samplerCube _Cube;
uniform highp float _Falloff;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainReflectivityTex;
uniform highp vec4 _MainReflectivityTex_AddMul;
uniform sampler2D _MainRoughnessTex;
uniform highp vec4 _MainRoughnessTex_AddMul;
uniform sampler2D _MainTex;
uniform highp float _Metalic;
uniform sampler2D _MirrorTex;
uniform highp vec4 _PlanarReflection0;
uniform highp vec4 _PlanarReflection1;
uniform highp vec4 _PlanarReflection2;
uniform highp vec4 _PlanarReflectionBiTangent0;
uniform highp vec4 _PlanarReflectionBiTangent1;
uniform highp vec4 _PlanarReflectionBiTangent2;
uniform highp vec4 _PlanarReflectionTangent0;
uniform highp vec4 _PlanarReflectionTangent1;
uniform highp vec4 _PlanarReflectionTangent2;
uniform sampler2D _PlanarReflectionTex0;
uniform sampler2D _PlanarReflectionTex1;
uniform sampler2D _PlanarReflectionTex2;
uniform highp float _Refl0;
uniform highp float _Refl90;
uniform lowp vec4 _ReflColor;
uniform highp float _ReflOnlyIntensity;
uniform highp float _Reflectivity;
uniform highp float _Rolloff;
uniform highp float _Roughness;
uniform highp float _Roughness2;
uniform highp float _SpecOnlyIntensity;
uniform highp mat4 _WorldToMirrorProjMatrix;
uniform highp vec4 glstate_lightmodel_ambient;
uniform sampler2D unity_Lightmap;
uniform highp vec4 unity_LightmapFade;
uniform sampler2D unity_LightmapInd;
uniform sampler2D unity_LightmapThird;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHC;
lowp vec3 UnpackNormal( in lowp vec4 packednormal );
highp float RemapToRange( in highp float v, in highp vec4 range );
mediump vec3 ShadeSH9( in mediump vec4 normal );
highp vec4 SamplePlanarReflection( in sampler2D s, in PlanarMapping p, in highp vec3 rayStart, in highp vec3 rayDir, in ContinuousSamplerLOD level );
highp vec4 tex2Dclod( in sampler2D s, in highp vec2 uv, in ContinuousSamplerLOD level );
highp vec4 SampleMirrorReflection( in highp vec3 worldPos, in ContinuousSamplerLOD level );
highp vec4 texCUBEclod( in samplerCube s, in highp vec3 dir, in ContinuousSamplerLOD level );
highp vec4 SampleCubeReflection( in samplerCube s, in highp vec3 rayDir, in ContinuousSamplerLOD level );
highp vec4 GlossyReflectionTerm( in Input IN, in samplerCube crefl, in PlanarMapping pm0, in sampler2D prefl0, in PlanarMapping pm1, in sampler2D prefl1, in PlanarMapping pm2, in sampler2D prefl2, in highp vec3 normal, in highp float Q, in highp float lod );
highp float EvalMipLevel( in highp vec3 uvw, in highp float texResolution );
highp vec3 GlobalIllumination( in Input IN, in MySurfaceOutput s, out highp vec3 spec );
highp vec3 CombineNormals( in highp vec3 n1, in highp vec3 n2 );
void surf( in Input IN, inout MySurfaceOutput o );
highp float OrenNayarTerm( in highp float roughness, in highp vec3 normal, in highp vec3 lightDir, in highp vec3 viewDir );
highp float LambertTermWithRolloff( in highp vec3 normal, in highp vec3 lightDir );
highp float FresnelTerm( in highp float refl0, in highp float refl90, in highp float cosA );
highp float CTRoughnessTerm( in highp float roughness, in highp float NdotH );
highp float CTGeometricTerm( in highp float NdotL, in highp float NdotH, in highp float NdotV, in highp float VdotH );
highp float BlinnTermWithRolloff( in highp vec3 normal, in highp vec3 halfDir );
highp float CookTorranceTerm( in highp float roughness, in highp float refl0, in highp float refl90, in highp vec3 normal, in highp vec3 lightDir, in highp vec3 viewDir );
lowp vec4 LightingOrenNayar_CookTorrance( in MySurfaceOutput s, in highp vec3 lightDir, in highp vec3 viewDir, in highp float atten );
lowp vec3 DecodeLightmap( in lowp vec4 color );
lowp vec4 LightingOrenNayar_CookTorrance_DualLightmap( in MySurfaceOutput s, in lowp vec4 indirect, in lowp vec4 total, in mediump float blendFactor, in highp vec3 lightDir, in highp vec3 viewDir, in highp float atten );
lowp vec4 xlat_main( in v2f_surf IN );
#line 68 // gl_
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    lowp vec3 normal;
    #line 71 // gl_
    normal.xy = ((packednormal.wy * 2.0) - 1.0);
    normal.z = sqrt(((1.0 - (normal.x * normal.x)) - (normal.y * normal.y)));
    return normal;
}
#line 204 // gl_
highp float RemapToRange( in highp float v, in highp vec4 range ) {
    v *= range.y;
    v += range.x;
    #line 208 // gl_
    return v;
}
#line 46 // gl_
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec4 vB;
    mediump vec3 x2;
    highp float vC;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 50 // gl_
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 54 // gl_
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 58 // gl_
    return ((x1 + x2) + x3);
}
#line 287 // gl_
highp vec4 SamplePlanarReflection( in sampler2D s, in PlanarMapping p, in highp vec3 rayStart, in highp vec3 rayDir, in ContinuousSamplerLOD level ) {
    highp float Vd;
    highp float Vo;
    highp float t;
    highp vec3 Pi;
    highp vec3 Po;
    highp vec3 d;
    highp float u;
    highp float v;
    Vd = (-dot( p.plane.xyz, rayDir));
    if ((Vd < 0.0001)){
        return vec4( 0.0, 0.0, 0.0, 0.0);
    }
    #line 291 // gl_
    Vo = (dot( p.plane.xyz, rayStart) + p.plane.w);
    t = (Vo / Vd);
    if ((t < 0.0)){
        return vec4( 0.0, 0.0, 0.0, 0.0);
    }
    Pi = (rayStart + (rayDir * t));
    #line 295 // gl_
    Po = (p.plane.xyz * p.plane.w);
    d = (Pi - Po);
    u = (((dot( d, p.tangent) * 0.5) + 0.5) - (p.uvOffset.x * 0.5));
    v = (((dot( d, (-p.bitangent)) * 0.5) + 0.5) + (p.uvOffset.y * 0.5));
    #line 299 // gl_
    if (((((u < 0.0) || (u > 1.0)) || (v < 0.0)) || (v > 1.0))){
        return vec4( 0.0, 0.0, 0.0, 0.0);
    }
    return tex2Dclod( s, vec2( u, v), level);
}
#line 260 // gl_
highp vec4 tex2Dclod( in sampler2D s, in highp vec2 uv, in ContinuousSamplerLOD level ) {
    return mix( xll_tex2Dlod( s, vec4( uv, 0.0, level.mip0)), xll_tex2Dlod( s, vec4( uv, 0.0, level.mip1)), vec4( level.mipFrac));
}
#line 278 // gl_
highp vec4 SampleMirrorReflection( in highp vec3 worldPos, in ContinuousSamplerLOD level ) {
    highp vec4 ppos;
    ppos = (_WorldToMirrorProjMatrix * vec4( worldPos, 1.0));
    return tex2Dclod( _MirrorTex, (ppos.xy / ppos.w), level);
}
#line 264 // gl_
highp vec4 texCUBEclod( in samplerCube s, in highp vec3 dir, in ContinuousSamplerLOD level ) {
    return mix( xll_texCUBElod( s, vec4( dir, level.mip0)), xll_texCUBElod( s, vec4( dir, level.mip1)), vec4( level.mipFrac));
}
#line 283 // gl_
highp vec4 SampleCubeReflection( in samplerCube s, in highp vec3 rayDir, in ContinuousSamplerLOD level ) {
    return texCUBEclod( s, rayDir, level);
}
#line 302 // gl_
highp vec4 GlossyReflectionTerm( in Input IN, in samplerCube crefl, in PlanarMapping pm0, in sampler2D prefl0, in PlanarMapping pm1, in sampler2D prefl1, in PlanarMapping pm2, in sampler2D prefl2, in highp vec3 normal, in highp float Q, in highp float lod ) {
    highp float W;
    highp vec3 worldP;
    highp vec4 o1;
    highp vec4 o2;
    highp vec3 worldRefl;
    ContinuousSamplerLOD clod;
    #line 304 // gl_
    W = (Q / pow( 2.0, 0.5));
    worldP = IN.worldPos;
    o1 = vec4( 0.0);
    o2 = vec4( 0.0);
    #line 309 // gl_
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, normal), dot( IN.TtoW1, normal), dot( IN.TtoW2, normal)));
    clod.mip0 = floor(lod);
    clod.mip1 = (clod.mip0 + 1.0);
    #line 313 // gl_
    clod.mipFrac = fract(lod);
    o1 = SampleMirrorReflection( worldP, clod);
    o1 = mix( SamplePlanarReflection( prefl0, pm0, worldP, worldRefl, clod), o1, vec4( o1.w));
    o1 = mix( SamplePlanarReflection( prefl1, pm1, worldP, worldRefl, clod), o1, vec4( o1.w));
    #line 317 // gl_
    o1 = mix( SamplePlanarReflection( prefl2, pm2, worldP, worldRefl, clod), o1, vec4( o1.w));
    clod.mip0 = floor((lod * 2.0));
    clod.mip1 = (clod.mip0 + 1.0);
    clod.mipFrac = fract((lod * 2.0));
    #line 321 // gl_
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( Q, 0.0, 0.0))), dot( IN.TtoW1, (normal + vec3( Q, 0.0, 0.0))), dot( IN.TtoW2, (normal + vec3( Q, 0.0, 0.0)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( (-Q), 0.0, 0.0))), dot( IN.TtoW1, (normal + vec3( (-Q), 0.0, 0.0))), dot( IN.TtoW2, (normal + vec3( (-Q), 0.0, 0.0)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    #line 325 // gl_
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( 0.0, (-Q), 0.0))), dot( IN.TtoW1, (normal + vec3( 0.0, (-Q), 0.0))), dot( IN.TtoW2, (normal + vec3( 0.0, (-Q), 0.0)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( 0.0, Q, 0.0))), dot( IN.TtoW1, (normal + vec3( 0.0, Q, 0.0))), dot( IN.TtoW2, (normal + vec3( 0.0, Q, 0.0)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    #line 329 // gl_
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( W, W, 0.0))), dot( IN.TtoW1, (normal + vec3( W, W, 0.0))), dot( IN.TtoW2, (normal + vec3( W, W, 0.0)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( (-W), W, 0.0))), dot( IN.TtoW1, (normal + vec3( (-W), W, 0.0))), dot( IN.TtoW2, (normal + vec3( (-W), W, 0.0)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    #line 333 // gl_
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( W, (-W), 0.0))), dot( IN.TtoW1, (normal + vec3( W, (-W), 0.0))), dot( IN.TtoW2, (normal + vec3( W, (-W), 0.0)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( (-W), (-W), 0.0))), dot( IN.TtoW1, (normal + vec3( (-W), (-W), 0.0))), dot( IN.TtoW2, (normal + vec3( (-W), (-W), 0.0)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    #line 337 // gl_
    o2 /= 8.0;
    return mix( o2, o1, vec4( o1.w));
}
#line 192 // gl_
highp float EvalMipLevel( in highp vec3 uvw, in highp float texResolution ) {
    highp vec3 dxSize;
    highp vec3 dySize;
    highp vec3 dTexCoords;
    highp float fMinTexCoordDelta;
    highp float fMipLevel;
    #line 194 // gl_
    dxSize = xll_dFdx(uvw);
    dySize = xll_dFdy(uvw);
    #line 199 // gl_
    dTexCoords = ((dxSize * dxSize) + (dySize * dySize));
    fMinTexCoordDelta = (max( dTexCoords.z, max( dTexCoords.x, dTexCoords.y)) * texResolution);
    fMipLevel = max( (0.5 * log2(fMinTexCoordDelta)), 0.0);
    return fMipLevel;
}
#line 350 // gl_
highp vec3 GlobalIllumination( in Input IN, in MySurfaceOutput s, out highp vec3 spec ) {
    highp vec3 normal;
    highp vec3 worldRefl;
    lowp vec3 worldN;
    highp float roughness;
    highp float Q;
    highp float LOD;
    PlanarMapping pm0;
    PlanarMapping pm1;
    PlanarMapping pm2;
    highp vec3 refl;
    highp vec3 ambient;
    normal = normalize(s.Normal);
    worldRefl = normalize(reflect( IN.worldRefl, vec3( dot( IN.TtoW0, normal), dot( IN.TtoW1, normal), dot( IN.TtoW2, normal))));
    #line 354 // gl_
    worldN = vec3( dot( IN.TtoW0, normal), dot( IN.TtoW1, normal), dot( IN.TtoW2, normal));
    roughness = (_Roughness * s.Roughness);
    Q = (0.0825 * (1.0 - pow( (1.0 - max( 0.0, (roughness - 0.033))), 2.0)));
    LOD = ((1.25 * (1.0 - pow( (1.0 - max( 0.0, roughness)), 2.0))) * 4.0);
    #line 359 // gl_
    pm0.plane = _PlanarReflection0;
    pm0.tangent = _PlanarReflectionTangent0.xyz;
    pm0.bitangent = _PlanarReflectionBiTangent0.xyz;
    pm0.uvOffset = vec2( _PlanarReflectionTangent0.w, _PlanarReflectionBiTangent0.w);
    #line 364 // gl_
    pm1.plane = _PlanarReflection1;
    pm1.tangent = _PlanarReflectionTangent1.xyz;
    pm1.bitangent = _PlanarReflectionBiTangent1.xyz;
    pm1.uvOffset = vec2( _PlanarReflectionTangent1.w, _PlanarReflectionBiTangent1.w);
    #line 369 // gl_
    pm2.plane = _PlanarReflection2;
    pm2.tangent = _PlanarReflectionTangent2.xyz;
    pm2.bitangent = _PlanarReflectionBiTangent2.xyz;
    pm2.uvOffset = vec2( _PlanarReflectionTangent2.w, _PlanarReflectionBiTangent2.w);
    #line 373 // gl_
    LOD = max( EvalMipLevel( worldRefl, 256.0), LOD);
    refl = (GlossyReflectionTerm( IN, _Cube, pm0, _PlanarReflectionTex0, pm1, _PlanarReflectionTex1, pm2, _PlanarReflectionTex2, normal, Q, LOD).xyz * _ReflOnlyIntensity);
    refl *= mix( s.Specular, (s.Specular * s.Albedo), vec3( _Metalic));
    spec = (refl * xll_saturate(s.Reflectivity));
    #line 377 // gl_
    ambient = (ShadeSH9( vec4( worldN, 1.0)) * s.Albedo);
    return mix( ambient, refl, vec3( xll_saturate(s.Reflectivity)));
}
#line 210 // gl_
highp vec3 CombineNormals( in highp vec3 n1, in highp vec3 n2 ) {
    highp vec3 n;
    highp mat3 nBasis;
    #line 212 // gl_
    n = normalize(n1);
    nBasis = xll_transpose(mat3( vec3( n.z, n.x, (-n.y)), vec3( n.x, n.z, (-n.y)), vec3( n.x, n.y, n.z)));
    return normalize((((n2.x * xll_matrixindex (nBasis, 0)) + (n2.y * xll_matrixindex (nBasis, 1))) + (n2.z * xll_matrixindex (nBasis, 2))));
}
#line 389 // gl_
void surf( in Input IN, inout MySurfaceOutput o ) {
    mediump vec4 c;
    highp vec2 uv_BumpMap2;
    highp vec3 up = vec3(0.0, 0.0, 1.0);
    highp vec3 n1;
    highp vec3 n2;
    highp float NdotV;
    highp float F;
    highp vec3 globalSpec;
    c = texture2D( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 393 // gl_
    o.Alpha = c.w;
    o.Specular = _ReflColor.xyz;
    uv_BumpMap2 = ((IN.uv_MainTex.xy * _BumpMap2_ST.xy) + _BumpMap2_ST.zw);
    #line 397 // gl_
    n1 = mix( up, max( vec3( -1.0, -1.0, 0.01), UnpackNormal( texture2D( _BumpMap, IN.uv_BumpMap))), vec3( _BumpMapFactor));
    n2 = mix( up, max( vec3( -1.0, -1.0, 0.01), UnpackNormal( texture2D( _BumpMap2, uv_BumpMap2))), vec3( _BumpMapFactor2));
    o.Normal = CombineNormals( n1, n2);
    NdotV = max( 0.0, dot( o.Normal, normalize(IN.viewDir)));
    #line 401 // gl_
    F = FresnelTerm( (_Refl0 * _Reflectivity), (_Refl90 * _Reflectivity), NdotV);
    o.Reflectivity = (RemapToRange( texture2D( _MainReflectivityTex, IN.uv_MainTex).x, _MainReflectivityTex_AddMul) * F);
    o.Roughness = RemapToRange( texture2D( _MainRoughnessTex, IN.uv_MainTex).x, _MainRoughnessTex_AddMul);
    #line 405 // gl_
    o.Emission = GlobalIllumination( IN, o, globalSpec);
}
#line 155 // gl_
highp float OrenNayarTerm( in highp float roughness, in highp vec3 normal, in highp vec3 lightDir, in highp vec3 viewDir ) {
    highp float rSq;
    highp float NdotL;
    highp float NdotV;
    highp float a;
    highp float b;
    highp float y;
    highp float K1;
    highp float K2;
    highp float c1;
    highp float c2;
    highp float c3;
    highp float x;
    highp float e;
    #line 160 // gl_
    rSq = (roughness * roughness);
    NdotL = LambertTermWithRolloff( normal, lightDir);
    NdotV = dot( normal, viewDir);
    a = max( acos(NdotV), acos(NdotL));
    #line 164 // gl_
    b = min( acos(NdotV), acos(NdotL));
    y = dot( (viewDir - (normal * NdotV)), (lightDir - (normal * NdotL)));
    K1 = (rSq / (rSq + 0.33));
    K2 = (rSq / (rSq + 0.09));
    #line 168 // gl_
    c1 = (1.0 - (0.5 * K1));
    c2 = (0.45 * K2);
    c2 *= (sin(a) - (( (y >= 0.0) ) ? ( 0.0 ) : ( pow( ((2.0 * b) * 0.31831), 3.0) )));
    c3 = ((0.125 * K2) * pow( (((4.0 * a) * b) * 0.101321), 2.0));
    #line 172 // gl_
    x = ((y * c2) * tan(b));
    e = (((1.0 - abs(y)) * c3) * tan(((a + b) / 2.0)));
    return ((c1 + x) + e);
}
#line 116 // gl_
highp float LambertTermWithRolloff( in highp vec3 normal, in highp vec3 lightDir ) {
    return (max( 0.0, (dot( normal, lightDir) + _Rolloff)) / (1.0 + (_Rolloff * 2.0)));
}
#line 125 // gl_
highp float FresnelTerm( in highp float refl0, in highp float refl90, in highp float cosA ) {
    highp float t;
    t = pow( abs((1.0 - cosA)), _Falloff);
    return ((refl0 * (1.0 - t)) + (refl90 * t));
}
#line 134 // gl_
highp float CTRoughnessTerm( in highp float roughness, in highp float NdotH ) {
    highp float mSq;
    highp float a;
    highp float b;
    highp float c;
    mSq = (roughness * roughness);
    a = (1.0 / ((4.0 * mSq) * pow( NdotH, 4.0)));
    #line 138 // gl_
    b = ((NdotH * NdotH) - 1.0);
    c = ((mSq * NdotH) * NdotH);
    return (a * exp((b / c)));
}
#line 130 // gl_
highp float CTGeometricTerm( in highp float NdotL, in highp float NdotH, in highp float NdotV, in highp float VdotH ) {
    return min( 1.0, min( (((2.0 * NdotH) * NdotV) / VdotH), (((2.0 * NdotH) * NdotL) / VdotH)));
}
#line 120 // gl_
highp float BlinnTermWithRolloff( in highp vec3 normal, in highp vec3 halfDir ) {
    return (max( 0.0, (dot( normal, halfDir) + (_Rolloff * 2.0))) / (1.0 + (_Rolloff * 2.0)));
}
#line 142 // gl_
highp float CookTorranceTerm( in highp float roughness, in highp float refl0, in highp float refl90, in highp vec3 normal, in highp vec3 lightDir, in highp vec3 viewDir ) {
    highp vec3 halfDir;
    highp float nl;
    highp float nh;
    highp float nv;
    highp float vh;
    highp float F;
    highp float G;
    highp float R;
    halfDir = normalize((lightDir + viewDir));
    nl = LambertTermWithRolloff( normal, lightDir);
    #line 146 // gl_
    nh = BlinnTermWithRolloff( normal, halfDir);
    nv = max( 0.0, dot( normal, viewDir));
    vh = max( 0.0, dot( viewDir, halfDir));
    F = FresnelTerm( refl0, refl90, vh);
    #line 150 // gl_
    G = CTGeometricTerm( nl, nh, nv, vh);
    R = CTRoughnessTerm( roughness, nh);
    R = max( 0.0, R);
    return max( 0.0, (((F * G) * R) / (nv * nl)));
}
#line 223 // gl_
lowp vec4 LightingOrenNayar_CookTorrance( in MySurfaceOutput s, in highp vec3 lightDir, in highp vec3 viewDir, in highp float atten ) {
    highp vec3 normal;
    highp float nl;
    highp float diffRoughness;
    highp float specRoughness;
    highp float refl0;
    highp float refl90;
    highp float spec;
    highp vec3 specColor;
    highp vec3 diffColor;
    highp float diffScatter;
    lowp vec4 c;
    normal = normalize(s.Normal);
    lightDir = normalize(lightDir);
    #line 227 // gl_
    viewDir = normalize(viewDir);
    nl = LambertTermWithRolloff( normal, lightDir);
    diffRoughness = _Roughness2;
    specRoughness = max( 0.02, (_Roughness * s.Roughness));
    #line 231 // gl_
    refl0 = (_Refl0 * _Reflectivity);
    refl90 = (_Refl90 * _Reflectivity);
    spec = (CookTorranceTerm( specRoughness, refl0, refl90, normal, lightDir, viewDir) * _SpecOnlyIntensity);
    specColor = ((_LightColor0.xyz * 2.0) * mix( s.Specular, (s.Specular * s.Albedo), vec3( _Metalic)));
    #line 235 // gl_
    diffColor = (_LightColor0.xyz * 2.0);
    diffScatter = OrenNayarTerm( diffRoughness, normal, lightDir, viewDir);
    c.xyz = ((mix( ((s.Albedo * diffColor) * diffScatter), (specColor * spec), vec3( s.Reflectivity)) * nl) * atten);
    #line 239 // gl_
    c.w = (s.Alpha + ((((length(specColor) * spec) * s.Reflectivity) * nl) * atten));
    return c;
}
#line 64 // gl_
lowp vec3 DecodeLightmap( in lowp vec4 color ) {
    #line 66 // gl_
    return ((8.0 * color.w) * color.xyz);
}
#line 242 // gl_
lowp vec4 LightingOrenNayar_CookTorrance_DualLightmap( in MySurfaceOutput s, in lowp vec4 indirect, in lowp vec4 total, in mediump float blendFactor, in highp vec3 lightDir, in highp vec3 viewDir, in highp float atten ) {
    highp vec3 lmInd;
    highp vec3 lmTotal;
    highp vec3 lmTotalBumped;
    highp vec4 rtLight;
    lowp vec4 c;
    #line 244 // gl_
    lmInd = (DecodeLightmap( indirect) - (glstate_lightmodel_ambient.xyz * 2.0));
    lmTotal = (DecodeLightmap( total) - (glstate_lightmodel_ambient.xyz * 2.0));
    lmTotalBumped = mix( lmInd, lmTotal, vec3( pow( s.Normal.z, 2.0)));
    rtLight = LightingOrenNayar_CookTorrance( s, lightDir, viewDir, atten);
    #line 249 // gl_
    c.xyz = (((mix( lmInd, lmTotalBumped, vec3( blendFactor)) * s.Albedo) * (1.0 - s.Reflectivity)) + (rtLight.xyz * (1.0 - blendFactor)));
    c.w = (rtLight.w * (1.0 - blendFactor));
    return c;
}
#line 456 // gl_
lowp vec4 xlat_main( in v2f_surf IN ) {
    Input surfIN;
    MySurfaceOutput o;
    lowp vec4 lmtex2;
    lowp float atten = 1.0;
    lowp vec4 c;
    lowp vec4 lmtex0;
    lowp vec4 lmtex1;
    lowp float lmFade;
    mediump float lmShadow;
    mediump vec4 lm;
    surfIN.uv_MainTex = IN.pack0.xy;
    #line 460 // gl_
    surfIN.uv_BumpMap = IN.pack0.zw;
    surfIN.worldRefl = vec3( IN.TtoW0.w, IN.TtoW1.w, IN.TtoW2.w);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    surfIN.TtoW1 = IN.TtoW1.xyz;
    #line 464 // gl_
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    surfIN.TtoW1 = IN.TtoW1.xyz;
    #line 468 // gl_
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.worldPos = IN.worldPos;
    surfIN.viewDir = IN.viewDir;
    #line 472 // gl_
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = vec3( 0.0);
    o.Alpha = 0.0;
    #line 476 // gl_
    lmtex2 = texture2D( unity_LightmapThird, IN.lmap.xy);
    surf( surfIN, o);
    c = vec4( 0.0);
    #line 480 // gl_
    lmtex0 = texture2D( unity_LightmapInd, IN.lmap.xy);
    lmtex1 = texture2D( unity_Lightmap, IN.lmap.xy);
    lmFade = xll_saturate(((IN.lmap.z * unity_LightmapFade.z) + unity_LightmapFade.w));
    lmShadow = lmtex2.x;
    #line 484 // gl_
    lm = LightingOrenNayar_CookTorrance_DualLightmap( o, lmtex0, lmtex1, lmFade, IN.lightDir, normalize(IN.viewDir), (atten * lmShadow));
    c += lm;
    c.xyz += o.Emission;
    c.w = 1.0;
    #line 488 // gl_
    return c;
}
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying lowp vec4 xlv_TEXCOORD3;
varying lowp vec4 xlv_TEXCOORD4;
varying lowp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4( xlv_TEXCOORD0);
    xlt_IN.worldPos = vec3( xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3( xlv_TEXCOORD2);
    xlt_IN.TtoW0 = vec4( xlv_TEXCOORD3);
    xlt_IN.TtoW1 = vec4( xlv_TEXCOORD4);
    xlt_IN.TtoW2 = vec4( xlv_TEXCOORD5);
    xlt_IN.lmap = vec4( xlv_TEXCOORD6);
    xlt_IN.lightDir = vec3( xlv_TEXCOORD7);
    xl_retval = xlat_main( xlt_IN);
    gl_FragData[0] = vec4( xl_retval);
}
