float xll_saturate( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 73
struct v2f {
    vec4 pos;
    vec4 normalInterpolator;
    vec4 viewInterpolator;
    vec4 bumpCoords;
    vec4 screenPos;
    vec4 grabPassPos;
};
uniform vec4 _BaseColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CameraDepthTexture;
uniform vec4 _DistortParams;
uniform vec4 _Foam;
uniform float _FresnelScale;
uniform vec4 _InvFadeParemeter;
uniform vec4 _ReflectionColor;
uniform sampler2D _ReflectionTex;
uniform sampler2D _RefractionTex;
uniform float _Shininess;
uniform sampler2D _ShoreTex;
uniform vec4 _SpecularColor;
uniform vec4 _WorldLightDir;
uniform vec4 _ZBufferParams;
vec3 PerPixelNormal( in sampler2D bumpMap, in vec4 coords, in vec3 vertexNormal, in float bumpStrength );
float LinearEyeDepth( in float z );
float Fresnel( in vec3 viewVector, in vec3 worldNormal, in float bias, in float power );
vec4 Foam( in sampler2D shoreTex, in vec4 coords );
vec4 ExtinctColor( in vec4 baseColor, in float extinctionAmount );
vec4 xlat_main( in v2f i );
#line 18
vec3 PerPixelNormal( in sampler2D bumpMap, in vec4 coords, in vec3 vertexNormal, in float bumpStrength ) {
    vec4 bump;
    vec3 worldNormal;
    bump = (texture2D( bumpMap, coords.xy) + texture2D( bumpMap, coords.zw));
    bump.xy = (bump.wy - vec2( 1.0, 1.0));
    #line 22
    worldNormal = (vertexNormal + ((bump.xxy * bumpStrength) * vec3( 1.0, 0.0, 1.0)));
    return normalize(worldNormal);
}
#line 12
float LinearEyeDepth( in float z ) {
    #line 14
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 55
float Fresnel( in vec3 viewVector, in vec3 worldNormal, in float bias, in float power ) {
    float facing;
    float refl2Refr;
    #line 57
    facing = clamp( (1.0 - max( dot( (-viewVector), worldNormal), 0.0)), 0.0, 1.0);
    refl2Refr = xll_saturate((bias + ((1.0 - bias) * pow( facing, power))));
    return refl2Refr;
}
#line 50
vec4 Foam( in sampler2D shoreTex, in vec4 coords ) {
    vec4 foam;
    #line 52
    foam = ((texture2D( shoreTex, coords.xy) * texture2D( shoreTex, coords.zw)) - 0.125);
    return foam;
}
#line 68
vec4 ExtinctColor( in vec4 baseColor, in float extinctionAmount ) {
    #line 70
    return (baseColor - (extinctionAmount * vec4( 0.15, 0.03, 0.01, 0.0)));
}
#line 101
vec4 xlat_main( in v2f i ) {
    vec3 worldNormal;
    vec3 viewVector;
    vec4 distortOffset;
    vec4 screenWithOffset;
    vec4 grabWithOffset;
    vec4 rtRefractionsNoDistort;
    float refrFix;
    vec4 rtRefractions;
    vec4 rtReflections;
    vec3 reflectVector;
    vec3 h;
    float nh;
    float spec;
    vec4 edgeBlendFactors = vec4(1.0, 0.0, 0.0, 0.0);
    float depth;
    float refl2Refr;
    vec4 baseColor;
    vec4 reflectionColor;
    vec4 foam;
    worldNormal = PerPixelNormal( _BumpMap, i.bumpCoords, i.normalInterpolator.xyz, _DistortParams.x);
    viewVector = normalize(i.viewInterpolator.xyz);
    #line 105
    distortOffset = vec4( ((worldNormal.xz * _DistortParams.y) * 10.0), 0.0, 0.0);
    screenWithOffset = (i.screenPos + distortOffset);
    grabWithOffset = (i.grabPassPos + distortOffset);
    rtRefractionsNoDistort = texture2DProj( _RefractionTex, i.grabPassPos);
    #line 109
    refrFix = texture2DProj( _CameraDepthTexture, grabWithOffset).x;
    rtRefractions = texture2DProj( _RefractionTex, grabWithOffset);
    rtReflections = texture2DProj( _ReflectionTex, screenWithOffset);
    if ((LinearEyeDepth( refrFix) < i.screenPos.z)){
        rtRefractions = rtRefractionsNoDistort;
    }
    #line 113
    reflectVector = normalize(reflect( viewVector, worldNormal));
    h = normalize((_WorldLightDir.xyz + viewVector.xyz));
    nh = max( 0.0, dot( worldNormal, (-h)));
    spec = max( 0.0, pow( nh, _Shininess));
    #line 117
    depth = texture2DProj( _CameraDepthTexture, i.screenPos).x;
    depth = LinearEyeDepth( depth);
    edgeBlendFactors = xll_saturate((_InvFadeParemeter * (depth - i.screenPos.w)));
    #line 121
    edgeBlendFactors.y = (1.0 - edgeBlendFactors.y);
    worldNormal.xz *= _FresnelScale;
    refl2Refr = Fresnel( viewVector, worldNormal, _DistortParams.w, _DistortParams.z);
    baseColor = ExtinctColor( _BaseColor, (i.viewInterpolator.w * _InvFadeParemeter.w));
    #line 125
    reflectionColor = mix( rtReflections, _ReflectionColor, vec4( _ReflectionColor.w));
    baseColor = mix( mix( rtRefractions, baseColor, vec4( baseColor.w)), reflectionColor, vec4( refl2Refr));
    baseColor = (baseColor + (spec * _SpecularColor));
    foam = Foam( _ShoreTex, (i.bumpCoords * 2.0));
    #line 129
    baseColor.xyz += ((foam.xyz * _Foam.x) * (edgeBlendFactors.y + xll_saturate((i.viewInterpolator.w - _Foam.y))));
    baseColor.w = edgeBlendFactors.x;
    return baseColor;
}
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD4;
void main() {
    vec4 xl_retval;
    v2f xlt_i;
    xlt_i.pos = vec4(0.0);
    xlt_i.normalInterpolator = vec4( xlv_TEXCOORD0);
    xlt_i.viewInterpolator = vec4( xlv_TEXCOORD1);
    xlt_i.bumpCoords = vec4( xlv_TEXCOORD2);
    xlt_i.screenPos = vec4( xlv_TEXCOORD3);
    xlt_i.grabPassPos = vec4( xlv_TEXCOORD4);
    xl_retval = xlat_main( xlt_i);
    gl_FragData[0] = vec4( xl_retval);
}
