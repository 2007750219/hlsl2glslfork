#extension GL_ARB_shader_texture_lod : require
float xll_dFdx(float f) {
  return dFdx(f);
}
vec2 xll_dFdx(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy(float f) {
  return dFdy(f);
}
vec2 xll_dFdy(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
vec4 xll_texCUBElod(samplerCube s, vec4 coord) {
  return textureCubeLod( s, coord.xyz, coord.w);
}
mat2 xll_transpose(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 106
struct MySurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    vec3 Specular;
    float Reflectivity;
    float Roughness;
    float Alpha;
};
#line 244
struct ContinuousSamplerLOD {
    float mip0;
    float mip1;
    float mipFrac;
};
#line 259
struct PlanarMapping {
    vec4 plane;
    vec3 tangent;
    vec3 bitangent;
    vec2 uvOffset;
};
#line 93
struct Input {
    vec2 uv_MainTex;
    vec2 uv_BumpMap;
    vec3 viewDir;
    vec3 worldPos;
    vec3 worldNormal;
    vec3 worldRefl;
    vec3 TtoW0;
    vec3 TtoW1;
    vec3 TtoW2;
};
#line 398
struct v2f_surf {
    vec4 pos;
    vec4 pack0;
    vec3 worldPos;
    vec3 viewDir;
    vec4 TtoW0;
    vec4 TtoW1;
    vec4 TtoW2;
    vec3 lightDir;
    vec3 vlight;
    vec2 _LightCoord;
};
#line 17
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
uniform sampler2D _BumpMap;
uniform sampler2D _BumpMap2;
uniform vec4 _BumpMap2_ST;
uniform float _BumpMapFactor;
uniform float _BumpMapFactor2;
uniform vec4 _Color;
uniform samplerCube _Cube;
uniform float _Falloff;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainReflectivityTex;
uniform vec4 _MainReflectivityTex_AddMul;
uniform sampler2D _MainRoughnessTex;
uniform vec4 _MainRoughnessTex_AddMul;
uniform sampler2D _MainTex;
uniform float _Metalic;
uniform sampler2D _MirrorTex;
uniform vec4 _PlanarReflection0;
uniform vec4 _PlanarReflection1;
uniform vec4 _PlanarReflection2;
uniform vec4 _PlanarReflectionBiTangent0;
uniform vec4 _PlanarReflectionBiTangent1;
uniform vec4 _PlanarReflectionBiTangent2;
uniform vec4 _PlanarReflectionTangent0;
uniform vec4 _PlanarReflectionTangent1;
uniform vec4 _PlanarReflectionTangent2;
uniform sampler2D _PlanarReflectionTex0;
uniform sampler2D _PlanarReflectionTex1;
uniform sampler2D _PlanarReflectionTex2;
uniform float _Refl0;
uniform float _Refl90;
uniform vec4 _ReflColor;
uniform float _ReflOnlyIntensity;
uniform float _Reflectivity;
uniform float _Rolloff;
uniform float _Roughness;
uniform float _Roughness2;
uniform float _SpecOnlyIntensity;
uniform mat4 _WorldToMirrorProjMatrix;
uniform vec4 unity_SHAb;
uniform vec4 unity_SHAg;
uniform vec4 unity_SHAr;
uniform vec4 unity_SHBb;
uniform vec4 unity_SHBg;
uniform vec4 unity_SHBr;
uniform vec4 unity_SHC;
vec3 UnpackNormal( in vec4 packednormal );
float RemapToRange( in float v, in vec4 range );
vec3 ShadeSH9( in vec4 normal );
vec4 SamplePlanarReflection( in sampler2D s, in PlanarMapping p, in vec3 rayStart, in vec3 rayDir, in ContinuousSamplerLOD level );
vec4 tex2Dclod( in sampler2D s, in vec2 uv, in ContinuousSamplerLOD level );
vec4 SampleMirrorReflection( in vec3 worldPos, in ContinuousSamplerLOD level );
vec4 texCUBEclod( in samplerCube s, in vec3 dir, in ContinuousSamplerLOD level );
vec4 SampleCubeReflection( in samplerCube s, in vec3 rayDir, in ContinuousSamplerLOD level );
vec4 GlossyReflectionTerm( in Input IN, in samplerCube crefl, in PlanarMapping pm0, in sampler2D prefl0, in PlanarMapping pm1, in sampler2D prefl1, in PlanarMapping pm2, in sampler2D prefl2, in vec3 normal, in float Q, in float lod );
float EvalMipLevel( in vec3 uvw, in float texResolution );
vec3 GlobalIllumination( in Input IN, in MySurfaceOutput s, out vec3 spec );
vec3 CombineNormals( in vec3 n1, in vec3 n2 );
void surf( in Input IN, inout MySurfaceOutput o );
float OrenNayarTerm( in float roughness, in vec3 normal, in vec3 lightDir, in vec3 viewDir );
float LambertTermWithRolloff( in vec3 normal, in vec3 lightDir );
float FresnelTerm( in float refl0, in float refl90, in float cosA );
float CTRoughnessTerm( in float roughness, in float NdotH );
float CTGeometricTerm( in float NdotL, in float NdotH, in float NdotV, in float VdotH );
float BlinnTermWithRolloff( in vec3 normal, in vec3 halfDir );
float CookTorranceTerm( in float roughness, in float refl0, in float refl90, in vec3 normal, in vec3 lightDir, in vec3 viewDir );
vec4 LightingOrenNayar_CookTorrance( in MySurfaceOutput s, in vec3 lightDir, in vec3 viewDir, in float atten );
vec4 xlat_main( in v2f_surf IN );
#line 68
vec3 UnpackNormal( in vec4 packednormal ) {
    vec3 normal;
    #line 71
    normal.xy = ((packednormal.wy * 2.00000) - 1.00000);
    normal.z = sqrt(((1.00000 - (normal.x * normal.x)) - (normal.y * normal.y)));
    return normal;
}
#line 206
float RemapToRange( in float v, in vec4 range ) {
    v *= range.y;
    v += range.x;
    #line 210
    return v;
}
#line 46
vec3 ShadeSH9( in vec4 normal ) {
    vec3 x1;
    vec4 vB;
    vec3 x2;
    float vC;
    vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 50
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 54
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 58
    return ((x1 + x2) + x3);
}
#line 278
vec4 SamplePlanarReflection( in sampler2D s, in PlanarMapping p, in vec3 rayStart, in vec3 rayDir, in ContinuousSamplerLOD level ) {
    float Vd;
    float Vo;
    float t;
    vec3 Pi;
    vec3 Po;
    vec3 d;
    float u;
    float v;
    Vd = (-dot( p.plane.xyz, rayDir));
    if ((Vd < 0.000100000)){
        return vec4( 0.00000, 0.00000, 0.00000, 0.00000);
    }
    #line 282
    Vo = (dot( p.plane.xyz, rayStart) + p.plane.w);
    t = (Vo / Vd);
    if ((t < 0.00000)){
        return vec4( 0.00000, 0.00000, 0.00000, 0.00000);
    }
    Pi = (rayStart + (rayDir * t));
    #line 286
    Po = (p.plane.xyz * p.plane.w);
    d = (Pi - Po);
    u = (((dot( d, p.tangent) * 0.500000) + 0.500000) - (p.uvOffset.x * 0.500000));
    v = (((dot( d, (-p.bitangent)) * 0.500000) + 0.500000) + (p.uvOffset.y * 0.500000));
    #line 290
    if (((((u < 0.00000) || (u > 1.00000)) || (v < 0.00000)) || (v > 1.00000))){
        return vec4( 0.00000, 0.00000, 0.00000, 0.00000);
    }
    return tex2Dclod( s, vec2( u, v), level);
}
#line 251
vec4 tex2Dclod( in sampler2D s, in vec2 uv, in ContinuousSamplerLOD level ) {
    return mix( xll_tex2Dlod( s, vec4( uv, 0.00000, level.mip0)), xll_tex2Dlod( s, vec4( uv, 0.00000, level.mip1)), vec4( level.mipFrac));
}
#line 269
vec4 SampleMirrorReflection( in vec3 worldPos, in ContinuousSamplerLOD level ) {
    vec4 ppos;
    ppos = (_WorldToMirrorProjMatrix * vec4( worldPos, 1.00000));
    return tex2Dclod( _MirrorTex, (ppos.xy / ppos.w), level);
}
#line 255
vec4 texCUBEclod( in samplerCube s, in vec3 dir, in ContinuousSamplerLOD level ) {
    return mix( xll_texCUBElod( s, vec4( dir, level.mip0)), xll_texCUBElod( s, vec4( dir, level.mip1)), vec4( level.mipFrac));
}
#line 274
vec4 SampleCubeReflection( in samplerCube s, in vec3 rayDir, in ContinuousSamplerLOD level ) {
    return texCUBEclod( s, rayDir, level);
}
#line 293
vec4 GlossyReflectionTerm( in Input IN, in samplerCube crefl, in PlanarMapping pm0, in sampler2D prefl0, in PlanarMapping pm1, in sampler2D prefl1, in PlanarMapping pm2, in sampler2D prefl2, in vec3 normal, in float Q, in float lod ) {
    float W;
    vec3 worldP;
    vec4 o1;
    vec4 o2;
    vec3 worldRefl;
    ContinuousSamplerLOD clod;
    #line 295
    W = (Q / pow( 2.00000, 0.500000));
    worldP = IN.worldPos;
    o1 = vec4( 0.00000);
    o2 = vec4( 0.00000);
    #line 300
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, normal), dot( IN.TtoW1, normal), dot( IN.TtoW2, normal)));
    clod.mip0 = floor(lod);
    clod.mip1 = (clod.mip0 + 1.00000);
    #line 304
    clod.mipFrac = fract(lod);
    o1 = SampleMirrorReflection( worldP, clod);
    o1 = mix( SamplePlanarReflection( prefl0, pm0, worldP, worldRefl, clod), o1, vec4( o1.w));
    o1 = mix( SamplePlanarReflection( prefl1, pm1, worldP, worldRefl, clod), o1, vec4( o1.w));
    #line 308
    o1 = mix( SamplePlanarReflection( prefl2, pm2, worldP, worldRefl, clod), o1, vec4( o1.w));
    clod.mip0 = floor((lod * 2.00000));
    clod.mip1 = (clod.mip0 + 1.00000);
    clod.mipFrac = fract((lod * 2.00000));
    #line 312
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( Q, 0.00000, 0.00000))), dot( IN.TtoW1, (normal + vec3( Q, 0.00000, 0.00000))), dot( IN.TtoW2, (normal + vec3( Q, 0.00000, 0.00000)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( (-Q), 0.00000, 0.00000))), dot( IN.TtoW1, (normal + vec3( (-Q), 0.00000, 0.00000))), dot( IN.TtoW2, (normal + vec3( (-Q), 0.00000, 0.00000)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    #line 316
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( 0.00000, (-Q), 0.00000))), dot( IN.TtoW1, (normal + vec3( 0.00000, (-Q), 0.00000))), dot( IN.TtoW2, (normal + vec3( 0.00000, (-Q), 0.00000)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( 0.00000, Q, 0.00000))), dot( IN.TtoW1, (normal + vec3( 0.00000, Q, 0.00000))), dot( IN.TtoW2, (normal + vec3( 0.00000, Q, 0.00000)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    #line 320
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( W, W, 0.00000))), dot( IN.TtoW1, (normal + vec3( W, W, 0.00000))), dot( IN.TtoW2, (normal + vec3( W, W, 0.00000)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( (-W), W, 0.00000))), dot( IN.TtoW1, (normal + vec3( (-W), W, 0.00000))), dot( IN.TtoW2, (normal + vec3( (-W), W, 0.00000)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    #line 324
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( W, (-W), 0.00000))), dot( IN.TtoW1, (normal + vec3( W, (-W), 0.00000))), dot( IN.TtoW2, (normal + vec3( W, (-W), 0.00000)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    worldRefl = reflect( IN.worldRefl, vec3( dot( IN.TtoW0, (normal + vec3( (-W), (-W), 0.00000))), dot( IN.TtoW1, (normal + vec3( (-W), (-W), 0.00000))), dot( IN.TtoW2, (normal + vec3( (-W), (-W), 0.00000)))));
    o2 += SampleCubeReflection( crefl, worldRefl, clod);
    #line 328
    o2 /= 8.00000;
    return mix( o2, o1, vec4( o1.w));
}
#line 194
float EvalMipLevel( in vec3 uvw, in float texResolution ) {
    vec3 dxSize;
    vec3 dySize;
    vec3 dTexCoords;
    float fMinTexCoordDelta;
    float fMipLevel;
    #line 196
    dxSize = xll_dFdx(uvw);
    dySize = xll_dFdy(uvw);
    #line 201
    dTexCoords = ((dxSize * dxSize) + (dySize * dySize));
    fMinTexCoordDelta = (max( dTexCoords.z, max( dTexCoords.x, dTexCoords.y)) * texResolution);
    fMipLevel = max( (0.500000 * log2(fMinTexCoordDelta)), 0.00000);
    return fMipLevel;
}
#line 341
vec3 GlobalIllumination( in Input IN, in MySurfaceOutput s, out vec3 spec ) {
    vec3 normal;
    vec3 worldRefl;
    vec3 worldN;
    float roughness;
    float Q;
    float LOD;
    PlanarMapping pm0;
    PlanarMapping pm1;
    PlanarMapping pm2;
    vec3 refl;
    vec3 ambient;
    normal = normalize(s.Normal);
    worldRefl = normalize(reflect( IN.worldRefl, vec3( dot( IN.TtoW0, normal), dot( IN.TtoW1, normal), dot( IN.TtoW2, normal))));
    #line 345
    worldN = vec3( dot( IN.TtoW0, normal), dot( IN.TtoW1, normal), dot( IN.TtoW2, normal));
    roughness = (_Roughness * s.Roughness);
    Q = (0.0825000 * (1.00000 - pow( (1.00000 - max( 0.00000, (roughness - 0.0330000))), 2.00000)));
    LOD = ((1.25000 * (1.00000 - pow( (1.00000 - max( 0.00000, roughness)), 2.00000))) * 4.00000);
    #line 350
    pm0.plane = _PlanarReflection0;
    pm0.tangent = _PlanarReflectionTangent0.xyz;
    pm0.bitangent = _PlanarReflectionBiTangent0.xyz;
    pm0.uvOffset = vec2( _PlanarReflectionTangent0.w, _PlanarReflectionBiTangent0.w);
    #line 355
    pm1.plane = _PlanarReflection1;
    pm1.tangent = _PlanarReflectionTangent1.xyz;
    pm1.bitangent = _PlanarReflectionBiTangent1.xyz;
    pm1.uvOffset = vec2( _PlanarReflectionTangent1.w, _PlanarReflectionBiTangent1.w);
    #line 360
    pm2.plane = _PlanarReflection2;
    pm2.tangent = _PlanarReflectionTangent2.xyz;
    pm2.bitangent = _PlanarReflectionBiTangent2.xyz;
    pm2.uvOffset = vec2( _PlanarReflectionTangent2.w, _PlanarReflectionBiTangent2.w);
    #line 364
    LOD = max( EvalMipLevel( worldRefl, 256.000), LOD);
    refl = (GlossyReflectionTerm( IN, _Cube, pm0, _PlanarReflectionTex0, pm1, _PlanarReflectionTex1, pm2, _PlanarReflectionTex2, normal, Q, LOD).xyz * _ReflOnlyIntensity);
    refl *= mix( s.Specular, (s.Specular * s.Albedo), vec3( _Metalic));
    spec = (refl * xll_saturate(s.Reflectivity));
    #line 368
    ambient = (ShadeSH9( vec4( worldN, 1.00000)) * s.Albedo);
    return mix( ambient, refl, vec3( xll_saturate(s.Reflectivity)));
}
#line 212
vec3 CombineNormals( in vec3 n1, in vec3 n2 ) {
    vec3 n;
    mat3 nBasis;
    #line 214
    n = normalize(n1);
    nBasis = xll_transpose(mat3( vec3( n.z, n.x, (-n.y)), vec3( n.x, n.z, (-n.y)), vec3( n.x, n.y, n.z)));
    return normalize((((n2.x * xll_matrixindex (nBasis, 0)) + (n2.y * xll_matrixindex (nBasis, 1))) + (n2.z * xll_matrixindex (nBasis, 2))));
}
#line 380
void surf( in Input IN, inout MySurfaceOutput o ) {
    vec4 c;
    vec2 uv_BumpMap2;
    vec3 up = vec3(0.00000, 0.00000, 1.00000);
    vec3 n1;
    vec3 n2;
    float NdotV;
    float F;
    vec3 globalSpec;
    c = texture2D( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 384
    o.Alpha = c.w;
    o.Specular = _ReflColor.xyz;
    uv_BumpMap2 = ((IN.uv_MainTex.xy * _BumpMap2_ST.xy) + _BumpMap2_ST.zw);
    #line 388
    n1 = mix( up, max( vec3( -1.00000, -1.00000, 0.0100000), UnpackNormal( texture2D( _BumpMap, IN.uv_BumpMap))), vec3( _BumpMapFactor));
    n2 = mix( up, max( vec3( -1.00000, -1.00000, 0.0100000), UnpackNormal( texture2D( _BumpMap2, uv_BumpMap2))), vec3( _BumpMapFactor2));
    o.Normal = CombineNormals( n1, n2);
    NdotV = max( 0.00000, dot( o.Normal, normalize(IN.viewDir)));
    #line 392
    F = FresnelTerm( (_Refl0 * _Reflectivity), (_Refl90 * _Reflectivity), NdotV);
    o.Reflectivity = (RemapToRange( texture2D( _MainReflectivityTex, IN.uv_MainTex).x, _MainReflectivityTex_AddMul) * F);
    o.Roughness = RemapToRange( texture2D( _MainRoughnessTex, IN.uv_MainTex).x, _MainRoughnessTex_AddMul);
    #line 396
    o.Emission = GlobalIllumination( IN, o, globalSpec);
}
#line 157
float OrenNayarTerm( in float roughness, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {
    float rSq;
    float NdotL;
    float NdotV;
    float a;
    float b;
    float y;
    float K1;
    float K2;
    float c1;
    float c2;
    float c3;
    float x;
    float e;
    #line 162
    rSq = (roughness * roughness);
    NdotL = LambertTermWithRolloff( normal, lightDir);
    NdotV = dot( normal, viewDir);
    a = max( acos(NdotV), acos(NdotL));
    #line 166
    b = min( acos(NdotV), acos(NdotL));
    y = dot( (viewDir - (normal * NdotV)), (lightDir - (normal * NdotL)));
    K1 = (rSq / (rSq + 0.330000));
    K2 = (rSq / (rSq + 0.0900000));
    #line 170
    c1 = (1.00000 - (0.500000 * K1));
    c2 = (0.450000 * K2);
    c2 *= (sin(a) - (( (y >= 0.00000) ) ? ( 0.00000 ) : ( pow( ((2.00000 * b) * 0.318310), 3.00000) )));
    c3 = ((0.125000 * K2) * pow( (((4.00000 * a) * b) * 0.101321), 2.00000));
    #line 174
    x = ((y * c2) * tan(b));
    e = (((1.00000 - abs(y)) * c3) * tan(((a + b) / 2.00000)));
    return ((c1 + x) + e);
}
#line 118
float LambertTermWithRolloff( in vec3 normal, in vec3 lightDir ) {
    return (max( 0.00000, (dot( normal, lightDir) + _Rolloff)) / (1.00000 + (_Rolloff * 2.00000)));
}
#line 127
float FresnelTerm( in float refl0, in float refl90, in float cosA ) {
    float t;
    t = pow( abs((1.00000 - cosA)), _Falloff);
    return ((refl0 * (1.00000 - t)) + (refl90 * t));
}
#line 136
float CTRoughnessTerm( in float roughness, in float NdotH ) {
    float mSq;
    float a;
    float b;
    float c;
    mSq = (roughness * roughness);
    a = (1.00000 / ((4.00000 * mSq) * pow( NdotH, 4.00000)));
    #line 140
    b = ((NdotH * NdotH) - 1.00000);
    c = ((mSq * NdotH) * NdotH);
    return (a * exp((b / c)));
}
#line 132
float CTGeometricTerm( in float NdotL, in float NdotH, in float NdotV, in float VdotH ) {
    return min( 1.00000, min( (((2.00000 * NdotH) * NdotV) / VdotH), (((2.00000 * NdotH) * NdotL) / VdotH)));
}
#line 122
float BlinnTermWithRolloff( in vec3 normal, in vec3 halfDir ) {
    return (max( 0.00000, (dot( normal, halfDir) + (_Rolloff * 2.00000))) / (1.00000 + (_Rolloff * 2.00000)));
}
#line 144
float CookTorranceTerm( in float roughness, in float refl0, in float refl90, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {
    vec3 halfDir;
    float nl;
    float nh;
    float nv;
    float vh;
    float F;
    float G;
    float R;
    halfDir = normalize((lightDir + viewDir));
    nl = LambertTermWithRolloff( normal, lightDir);
    #line 148
    nh = BlinnTermWithRolloff( normal, halfDir);
    nv = max( 0.00000, dot( normal, viewDir));
    vh = max( 0.00000, dot( viewDir, halfDir));
    F = FresnelTerm( refl0, refl90, vh);
    #line 152
    G = CTGeometricTerm( nl, nh, nv, vh);
    R = CTRoughnessTerm( roughness, nh);
    R = max( 0.00000, R);
    return max( 0.00000, (((F * G) * R) / (nv * nl)));
}
#line 225
vec4 LightingOrenNayar_CookTorrance( in MySurfaceOutput s, in vec3 lightDir, in vec3 viewDir, in float atten ) {
    vec3 normal;
    float nl;
    float diffRoughness;
    float specRoughness;
    float refl0;
    float refl90;
    float spec;
    vec3 specColor;
    vec3 diffColor;
    float diffScatter;
    vec4 c;
    normal = normalize(s.Normal);
    lightDir = normalize(lightDir);
    #line 229
    viewDir = normalize(viewDir);
    nl = LambertTermWithRolloff( normal, lightDir);
    diffRoughness = _Roughness2;
    specRoughness = max( 0.0200000, (_Roughness * s.Roughness));
    #line 233
    refl0 = (_Refl0 * _Reflectivity);
    refl90 = (_Refl90 * _Reflectivity);
    spec = (CookTorranceTerm( specRoughness, refl0, refl90, normal, lightDir, viewDir) * _SpecOnlyIntensity);
    specColor = ((_LightColor0.xyz * 2.00000) * mix( s.Specular, (s.Specular * s.Albedo), vec3( _Metalic)));
    #line 237
    diffColor = (_LightColor0.xyz * 2.00000);
    diffScatter = OrenNayarTerm( diffRoughness, normal, lightDir, viewDir);
    c.xyz = ((mix( ((s.Albedo * diffColor) * diffScatter), (specColor * spec), vec3( s.Reflectivity)) * nl) * atten);
    #line 241
    c.w = (s.Alpha + ((((length(specColor) * spec) * s.Reflectivity) * nl) * atten));
    return c;
}
#line 440
vec4 xlat_main( in v2f_surf IN ) {
    Input surfIN;
    MySurfaceOutput o;
    float atten;
    vec4 c;
    #line 443
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.uv_BumpMap = IN.pack0.zw;
    surfIN.worldRefl = vec3( IN.TtoW0.w, IN.TtoW1.w, IN.TtoW2.w);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    #line 447
    surfIN.TtoW1 = IN.TtoW1.xyz;
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.worldNormal = vec3( 0.00000);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    #line 451
    surfIN.TtoW1 = IN.TtoW1.xyz;
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.worldPos = IN.worldPos;
    surfIN.viewDir = IN.viewDir;
    #line 456
    o.Albedo = vec3( 0.00000);
    o.Emission = vec3( 0.00000);
    o.Specular = vec3( 0.00000);
    o.Alpha = 0.00000;
    #line 460
    surf( surfIN, o);
    atten = (texture2D( _LightTexture0, IN._LightCoord).w * 1.00000);
    c = vec4( 0.00000);
    c = LightingOrenNayar_CookTorrance( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 464
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = 1.00000;
    return c;
}
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD8;
void main() {
    vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec4( xlv_TEXCOORD0);
    xlt_IN.worldPos = vec3( xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3( xlv_TEXCOORD2);
    xlt_IN.TtoW0 = vec4( xlv_TEXCOORD3);
    xlt_IN.TtoW1 = vec4( xlv_TEXCOORD4);
    xlt_IN.TtoW2 = vec4( xlv_TEXCOORD5);
    xlt_IN.lightDir = vec3( xlv_TEXCOORD6);
    xlt_IN.vlight = vec3( xlv_TEXCOORD7);
    xlt_IN._LightCoord = vec2( xlv_TEXCOORD8);
    xl_retval = xlat_main( xlt_IN);
    gl_FragData[0] = vec4( xl_retval);
}
