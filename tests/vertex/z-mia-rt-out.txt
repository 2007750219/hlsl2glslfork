mat2 xll_transpose(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
vec2 xll_matrixindex (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 106
struct MySurfaceOutput {
    vec3 Albedo;
    vec3 Normal;
    vec3 Emission;
    vec3 Specular;
    float Reflectivity;
    float Roughness;
    float Alpha;
};
#line 244
struct ContinuousSamplerLOD {
    float mip0;
    float mip1;
    float mipFrac;
};
#line 259
struct PlanarMapping {
    vec4 plane;
    vec3 tangent;
    vec3 bitangent;
    vec2 uvOffset;
};
#line 93
struct Input {
    vec2 uv_MainTex;
    vec2 uv_BumpMap;
    vec3 viewDir;
    vec3 worldPos;
    vec3 worldNormal;
    vec3 worldRefl;
    vec3 TtoW0;
    vec3 TtoW1;
    vec3 TtoW2;
};
#line 398
struct v2f_surf {
    vec4 pos;
    vec4 pack0;
    vec3 worldPos;
    vec3 viewDir;
    vec4 TtoW0;
    vec4 TtoW1;
    vec4 TtoW2;
    vec3 lightDir;
    vec3 vlight;
    vec2 _LightCoord;
};
#line 17
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
    vec4 texcoord1;
    vec4 color;
};
uniform vec4 _BumpMap_ST;
uniform mat4 _LightMatrix0;
uniform vec4 _MainTex_ST;
uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 glstate_matrix_mvp;
uniform vec4 unity_Scale;
vec3 ObjSpaceViewDir( in vec4 v );
vec3 ObjSpaceLightDir( in vec4 v );
v2f_surf xlat_main( in appdata_full v );
#line 41
vec3 ObjSpaceViewDir( in vec4 v ) {
    vec3 objSpaceCameraPos;
    objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 32
vec3 ObjSpaceLightDir( in vec4 v ) {
    vec3 objSpaceLightPos;
    objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 414
v2f_surf xlat_main( in appdata_full v ) {
    v2f_surf o;
    vec3 viewDir;
    vec3 worldRefl;
    vec3 binormal;
    mat3 rotation;
    vec3 worldN;
    vec3 lightDir;
    vec3 viewDirForLight;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 418
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pack0.zw = ((v.texcoord.xy * _BumpMap_ST.xy) + _BumpMap_ST.zw);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
    #line 422
    o.worldPos = (_Object2World * v.vertex).xyz;
    viewDir = (-ObjSpaceViewDir( v.vertex));
    worldRefl = (xll_constructMat3( _Object2World) * viewDir);
    binormal = (cross( normalize(v.normal), normalize(v.tangent.xyz)) * v.tangent.w);
    #line 426
    rotation = xll_transpose(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = (vec4( (rotation * xll_matrixindex (_Object2World, 0).xyz), worldRefl.x) * unity_Scale.w);
    o.TtoW1 = (vec4( (rotation * xll_matrixindex (_Object2World, 1).xyz), worldRefl.y) * unity_Scale.w);
    o.TtoW2 = (vec4( (rotation * xll_matrixindex (_Object2World, 2).xyz), worldRefl.z) * unity_Scale.w);
    #line 430
    worldN = (xll_constructMat3( _Object2World) * (v.normal * unity_Scale.w));
    lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 434
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 438
    return o;
}
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD8;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = xlat_main( xlt_v);
    gl_Position = vec4( xl_retval.pos);
    xlv_TEXCOORD0 = vec4( xl_retval.pack0);
    xlv_TEXCOORD1 = vec3( xl_retval.worldPos);
    xlv_TEXCOORD2 = vec3( xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4( xl_retval.TtoW0);
    xlv_TEXCOORD4 = vec4( xl_retval.TtoW1);
    xlv_TEXCOORD5 = vec4( xl_retval.TtoW2);
    xlv_TEXCOORD6 = vec3( xl_retval.lightDir);
    xlv_TEXCOORD7 = vec3( xl_retval.vlight);
    xlv_TEXCOORD8 = vec2( xl_retval._LightCoord);
}
