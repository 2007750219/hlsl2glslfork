float xll_saturate( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 119
struct v2f {
    vec4 pos;
    vec4 normalInterpolator;
    vec4 viewInterpolator;
    vec4 bumpCoords;
    vec4 screenPos;
    vec4 grabPassPos;
};
#line 16
struct appdata_full {
    vec4 vertex;
    vec4 tangent;
    vec3 normal;
    vec4 texcoord;
};
uniform vec4 _BumpDirection;
uniform vec4 _BumpTiling;
uniform vec4 _GAmplitude;
uniform vec4 _GDirectionAB;
uniform vec4 _GDirectionCD;
uniform vec4 _GFrequency;
uniform vec4 _GSpeed;
uniform vec4 _GSteepness;
uniform float _GerstnerIntensity;
uniform mat4 _Object2World;
uniform vec4 _ProjectionParams;
uniform vec4 _Time;
uniform vec3 _WorldSpaceCameraPos;
uniform mat4 glstate_matrix_mvp;
uniform vec4 unity_Scale;
vec3 GerstnerOffset4( in vec2 xzVtx, in vec4 steepness, in vec4 amp, in vec4 freq, in vec4 speed, in vec4 dirAB, in vec4 dirCD );
vec3 GerstnerNormal4( in vec2 xzVtx, in vec4 amp, in vec4 freq, in vec4 speed, in vec4 dirAB, in vec4 dirCD );
void Gerstner( out vec3 offs, out vec3 nrml, in vec3 vtx, in vec3 tileableVtx, in vec4 amplitude, in vec4 frequency, in vec4 steepness, in vec4 speed, in vec4 directionAB, in vec4 directionCD );
vec4 ComputeScreenPos( in vec4 pos );
void ComputeScreenAndGrabPassPos( in vec4 pos, out vec4 screenPos, out vec4 grabPassPos );
v2f xlat_main( in appdata_full v );
#line 79
vec3 GerstnerOffset4( in vec2 xzVtx, in vec4 steepness, in vec4 amp, in vec4 freq, in vec4 speed, in vec4 dirAB, in vec4 dirCD ) {
    vec4 AB;
    vec4 CD;
    vec4 dotABCD;
    vec4 TIME;
    vec4 COS;
    vec4 SIN;
    vec3 offsets;
    AB = ((steepness.xxyy * amp.xxyy) * dirAB.xyzw);
    #line 83
    CD = ((steepness.zzww * amp.zzww) * dirCD.xyzw);
    dotABCD = (freq.xyzw * vec4( dot( dirAB.xy, xzVtx), dot( dirAB.zw, xzVtx), dot( dirCD.xy, xzVtx), dot( dirCD.zw, xzVtx)));
    TIME = (_Time.yyyy * speed);
    COS = cos((dotABCD + TIME));
    #line 87
    SIN = sin((dotABCD + TIME));
    offsets.x = dot( COS, vec4( AB.xz, CD.xz));
    offsets.z = dot( COS, vec4( AB.yw, CD.yw));
    offsets.y = dot( SIN, amp);
    #line 91
    return offsets;
}
#line 100
vec3 GerstnerNormal4( in vec2 xzVtx, in vec4 amp, in vec4 freq, in vec4 speed, in vec4 dirAB, in vec4 dirCD ) {
    vec3 nrml = vec3(0.0, 2.0, 0.0);
    vec4 AB;
    vec4 CD;
    vec4 dotABCD;
    vec4 TIME;
    vec4 COS;
    AB = ((freq.xxyy * amp.xxyy) * dirAB.xyzw);
    #line 104
    CD = ((freq.zzww * amp.zzww) * dirCD.xyzw);
    dotABCD = (freq.xyzw * vec4( dot( dirAB.xy, xzVtx), dot( dirAB.zw, xzVtx), dot( dirCD.xy, xzVtx), dot( dirCD.zw, xzVtx)));
    TIME = (_Time.yyyy * speed);
    COS = cos((dotABCD + TIME));
    #line 108
    nrml.x -= dot( COS, vec4( AB.xz, CD.xz));
    nrml.z -= dot( COS, vec4( AB.yw, CD.yw));
    nrml.xz *= _GerstnerIntensity;
    nrml = normalize(nrml);
    #line 112
    return nrml;
}
#line 114
void Gerstner( out vec3 offs, out vec3 nrml, in vec3 vtx, in vec3 tileableVtx, in vec4 amplitude, in vec4 frequency, in vec4 steepness, in vec4 speed, in vec4 directionAB, in vec4 directionCD ) {
    #line 116
    offs = GerstnerOffset4( tileableVtx.xz, steepness, amplitude, frequency, speed, directionAB, directionCD);
    nrml = GerstnerNormal4( (tileableVtx.xz + offs.xz), amplitude, frequency, speed, directionAB, directionCD);
}
#line 35
vec4 ComputeScreenPos( in vec4 pos ) {
    vec4 o;
    #line 37
    o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 57
void ComputeScreenAndGrabPassPos( in vec4 pos, out vec4 screenPos, out vec4 grabPassPos ) {
    float scale = 1.0;
    screenPos = ComputeScreenPos( pos);
    #line 61
    grabPassPos.xy = ((vec2( pos.x, (pos.y * scale)) + pos.w) * 0.5);
    grabPassPos.zw = pos.zw;
}
#line 140
v2f xlat_main( in appdata_full v ) {
    vec3 worldSpaceVertex;
    vec3 vtxForAni;
    vec3 offsets;
    vec3 nrml;
    vec2 tileableUv;
    v2f o;
    worldSpaceVertex = (_Object2World * v.vertex).xyz;
    #line 144
    vtxForAni = (worldSpaceVertex.xzz * unity_Scale.w);
    Gerstner( offsets, nrml, v.vertex.xyz, vtxForAni, _GAmplitude, _GFrequency, _GSteepness, _GSpeed, _GDirectionAB, _GDirectionCD);
    #line 148
    v.vertex.xyz += offsets;
    tileableUv = (_Object2World * v.vertex).xz;
    o.bumpCoords.xyzw = ((tileableUv.xyxy + (_Time.xxxx * _BumpDirection.xyzw)) * _BumpTiling.xyzw);
    o.viewInterpolator.xyz = (worldSpaceVertex - _WorldSpaceCameraPos);
    #line 152
    o.pos = (glstate_matrix_mvp * v.vertex);
    ComputeScreenAndGrabPassPos( o.pos, o.screenPos, o.grabPassPos);
    o.normalInterpolator.xyz = nrml;
    o.viewInterpolator.w = xll_saturate(offsets.y);
    #line 156
    o.normalInterpolator.w = 1.0;
    return o;
}
attribute vec4 TANGENT;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD4;
void main() {
    v2f xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = xlat_main( xlt_v);
    gl_Position = vec4( xl_retval.pos);
    xlv_TEXCOORD0 = vec4( xl_retval.normalInterpolator);
    xlv_TEXCOORD1 = vec4( xl_retval.viewInterpolator);
    xlv_TEXCOORD2 = vec4( xl_retval.bumpCoords);
    xlv_TEXCOORD3 = vec4( xl_retval.screenPos);
    xlv_TEXCOORD4 = vec4( xl_retval.grabPassPos);
}
