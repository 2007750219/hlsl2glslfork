float xll_saturate( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 119
struct v2f {
    highp vec4 pos;
    highp vec4 normalInterpolator;
    highp vec4 viewInterpolator;
    highp vec4 bumpCoords;
    highp vec4 screenPos;
    highp vec4 grabPassPos;
};
#line 16
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _BumpDirection;
uniform highp vec4 _BumpTiling;
uniform highp vec4 _GAmplitude;
uniform highp vec4 _GDirectionAB;
uniform highp vec4 _GDirectionCD;
uniform highp vec4 _GFrequency;
uniform highp vec4 _GSpeed;
uniform highp vec4 _GSteepness;
uniform mediump float _GerstnerIntensity;
uniform highp mat4 _Object2World;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_Scale;
mediump vec3 GerstnerOffset4( in mediump vec2 xzVtx, in mediump vec4 steepness, in mediump vec4 amp, in mediump vec4 freq, in mediump vec4 speed, in mediump vec4 dirAB, in mediump vec4 dirCD );
mediump vec3 GerstnerNormal4( in mediump vec2 xzVtx, in mediump vec4 amp, in mediump vec4 freq, in mediump vec4 speed, in mediump vec4 dirAB, in mediump vec4 dirCD );
void Gerstner( out mediump vec3 offs, out mediump vec3 nrml, in mediump vec3 vtx, in mediump vec3 tileableVtx, in mediump vec4 amplitude, in mediump vec4 frequency, in mediump vec4 steepness, in mediump vec4 speed, in mediump vec4 directionAB, in mediump vec4 directionCD );
highp vec4 ComputeScreenPos( in highp vec4 pos );
void ComputeScreenAndGrabPassPos( in highp vec4 pos, out highp vec4 screenPos, out highp vec4 grabPassPos );
v2f xlat_main( in appdata_full v );
#line 79
mediump vec3 GerstnerOffset4( in mediump vec2 xzVtx, in mediump vec4 steepness, in mediump vec4 amp, in mediump vec4 freq, in mediump vec4 speed, in mediump vec4 dirAB, in mediump vec4 dirCD ) {
    mediump vec4 AB;
    mediump vec4 CD;
    mediump vec4 dotABCD;
    mediump vec4 TIME;
    mediump vec4 COS;
    mediump vec4 SIN;
    mediump vec3 offsets;
    AB = ((steepness.xxyy * amp.xxyy) * dirAB.xyzw);
    #line 83
    CD = ((steepness.zzww * amp.zzww) * dirCD.xyzw);
    dotABCD = (freq.xyzw * vec4( dot( dirAB.xy, xzVtx), dot( dirAB.zw, xzVtx), dot( dirCD.xy, xzVtx), dot( dirCD.zw, xzVtx)));
    TIME = (_Time.yyyy * speed);
    COS = cos((dotABCD + TIME));
    #line 87
    SIN = sin((dotABCD + TIME));
    offsets.x = dot( COS, vec4( AB.xz, CD.xz));
    offsets.z = dot( COS, vec4( AB.yw, CD.yw));
    offsets.y = dot( SIN, amp);
    #line 91
    return offsets;
}
#line 100
mediump vec3 GerstnerNormal4( in mediump vec2 xzVtx, in mediump vec4 amp, in mediump vec4 freq, in mediump vec4 speed, in mediump vec4 dirAB, in mediump vec4 dirCD ) {
    mediump vec3 nrml = vec3(0.0, 2.0, 0.0);
    mediump vec4 AB;
    mediump vec4 CD;
    mediump vec4 dotABCD;
    mediump vec4 TIME;
    mediump vec4 COS;
    AB = ((freq.xxyy * amp.xxyy) * dirAB.xyzw);
    #line 104
    CD = ((freq.zzww * amp.zzww) * dirCD.xyzw);
    dotABCD = (freq.xyzw * vec4( dot( dirAB.xy, xzVtx), dot( dirAB.zw, xzVtx), dot( dirCD.xy, xzVtx), dot( dirCD.zw, xzVtx)));
    TIME = (_Time.yyyy * speed);
    COS = cos((dotABCD + TIME));
    #line 108
    nrml.x -= dot( COS, vec4( AB.xz, CD.xz));
    nrml.z -= dot( COS, vec4( AB.yw, CD.yw));
    nrml.xz *= _GerstnerIntensity;
    nrml = normalize(nrml);
    #line 112
    return nrml;
}
#line 114
void Gerstner( out mediump vec3 offs, out mediump vec3 nrml, in mediump vec3 vtx, in mediump vec3 tileableVtx, in mediump vec4 amplitude, in mediump vec4 frequency, in mediump vec4 steepness, in mediump vec4 speed, in mediump vec4 directionAB, in mediump vec4 directionCD ) {
    #line 116
    offs = GerstnerOffset4( tileableVtx.xz, steepness, amplitude, frequency, speed, directionAB, directionCD);
    nrml = GerstnerNormal4( (tileableVtx.xz + offs.xz), amplitude, frequency, speed, directionAB, directionCD);
}
#line 35
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    highp vec4 o;
    #line 37
    o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 57
void ComputeScreenAndGrabPassPos( in highp vec4 pos, out highp vec4 screenPos, out highp vec4 grabPassPos ) {
    highp float scale = 1.0;
    screenPos = ComputeScreenPos( pos);
    #line 61
    grabPassPos.xy = ((vec2( pos.x, (pos.y * scale)) + pos.w) * 0.5);
    grabPassPos.zw = pos.zw;
}
#line 140
v2f xlat_main( in appdata_full v ) {
    mediump vec3 worldSpaceVertex;
    mediump vec3 vtxForAni;
    mediump vec3 offsets;
    mediump vec3 nrml;
    mediump vec2 tileableUv;
    v2f o;
    worldSpaceVertex = (_Object2World * v.vertex).xyz;
    #line 144
    vtxForAni = (worldSpaceVertex.xzz * unity_Scale.w);
    Gerstner( offsets, nrml, v.vertex.xyz, vtxForAni, _GAmplitude, _GFrequency, _GSteepness, _GSpeed, _GDirectionAB, _GDirectionCD);
    #line 148
    v.vertex.xyz += offsets;
    tileableUv = (_Object2World * v.vertex).xz;
    o.bumpCoords.xyzw = ((tileableUv.xyxy + (_Time.xxxx * _BumpDirection.xyzw)) * _BumpTiling.xyzw);
    o.viewInterpolator.xyz = (worldSpaceVertex - _WorldSpaceCameraPos);
    #line 152
    o.pos = (glstate_matrix_mvp * v.vertex);
    ComputeScreenAndGrabPassPos( o.pos, o.screenPos, o.grabPassPos);
    o.normalInterpolator.xyz = nrml;
    o.viewInterpolator.w = xll_saturate(offsets.y);
    #line 156
    o.normalInterpolator.w = 1.0;
    return o;
}
attribute vec4 TANGENT;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main() {
    v2f xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = xlat_main( xlt_v);
    gl_Position = vec4( xl_retval.pos);
    xlv_TEXCOORD0 = vec4( xl_retval.normalInterpolator);
    xlv_TEXCOORD1 = vec4( xl_retval.viewInterpolator);
    xlv_TEXCOORD2 = vec4( xl_retval.bumpCoords);
    xlv_TEXCOORD3 = vec4( xl_retval.screenPos);
    xlv_TEXCOORD4 = vec4( xl_retval.grabPassPos);
}
